{"version":3,"file":"static/js/428.3bdbb092.chunk.js","mappings":"oNACA,GAAgB,WAAa,2BAA2B,YAAc,4BAA4B,SAAW,0B,uCCuF7G,EA1Ec,WAEV,IAAIA,GAAUC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,YAAYH,WAClDI,GAAWC,EAAAA,EAAAA,KAEbC,GAASC,EAAAA,EAAAA,IAAU,CACnBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAAAC,GACNT,GAASU,EAAAA,EAAAA,IAAQD,IACjBP,EAAOS,aAEXC,SAAU,SAACH,GACP,IAAMI,EAA0B,GAOhC,OANKJ,EAAOJ,QACRQ,EAAOR,MAAQ,qBAEdI,EAAOH,WACRO,EAAOP,SAAW,wBAEfO,KAMf,OAAIjB,GACO,SAAC,KAAD,CAAUkB,GAAE,OAInB,iBAAKC,UAAWC,EAAAA,WAAhB,WACI,2IAOA,kBAAMR,SAAUN,EAAOe,aAAcC,SAAU,kBAAMlB,GAASmB,EAAAA,EAAAA,IAAS,MAAvE,WACI,gBAAKJ,UAAWC,EAAAA,YAAhB,UACI,0BACII,KAAK,OACLC,YAAY,SACRnB,EAAOoB,cAAc,aAGhCpB,EAAOqB,QAAQlB,OAASH,EAAOW,OAAOR,OAAQ,gBAAKmB,MAAO,CAACC,MAAO,MAAOC,UAAW,QAAtC,SAAgDxB,EAAOW,OAAOR,QAAe,MAC5H,gBAAKU,UAAWC,EAAAA,YAAhB,UACI,0BAAOI,KAAK,WACLC,YAAY,YACRnB,EAAOoB,cAAc,gBAGnCpB,EAAOqB,QAAQjB,UAAYJ,EAAOW,OAAOP,UAAW,gBAAKkB,MAAO,CAACC,MAAO,MAAOC,UAAW,QAAtC,SAAgDxB,EAAOW,OAAOP,WAAkB,MACrI,gBAAKS,UAAWC,EAAAA,SAAhB,UAA4B,8BACxB,kCAAOI,KAAK,YACDlB,EAAOoB,cAAc,eADhC,IAEOK,QAASzB,EAAOO,OAAOF,eAE9B,gDAEJ,gBAAKQ,UAAWC,EAAAA,SAAhB,UACI,mBAAQI,KAAM,SAAd","sources":["webpack://my-social-network/./src/components/Login/Login..module.css?98aa","components/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login_form\":\"Login__login_form__OjnG-\",\"login_input\":\"Login__login_input__dbACr\",\"loginBtn\":\"Login__loginBtn__d5R2s\"};","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC, setIsAuthTC} from \"../../redux/authReducer\";\r\nimport s from './Login..module.css'\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {setError} from \"../../redux/appReducer\";\r\nimport {useAppDispatch, useAppSelector} from \"../../redux/hooks\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nconst Login = () => {\r\n\r\n    let isLogin = useAppSelector(state => state.AuthReducer.isLogin)\r\n    const dispatch = useAppDispatch()\r\n\r\n    let formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'email is required';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'password is required'\r\n            }\r\n            return errors\r\n        }\r\n\r\n    })\r\n\r\n\r\n    if (isLogin) {\r\n        return <Navigate to={`/`}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.login_form}>\r\n            <p>To log in get registered here\r\n\r\n                or use common test account credentials:\r\n\r\n                Email: free@samuraijs.com\r\n\r\n                Password: free</p>\r\n            <form onSubmit={formik.handleSubmit} onChange={() => dispatch(setError(''))}>\r\n                <div className={s.login_input}>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder='email'\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                </div>\r\n                {formik.touched.email && formik.errors.email ? <div style={{color: 'red', textAlign: 'left'}}>{formik.errors.email}</div> : null}\r\n                <div className={s.login_input}>\r\n                    <input type=\"password\"\r\n                           placeholder='password'\r\n                           {...formik.getFieldProps('password')}\r\n                    />\r\n                </div>\r\n                {formik.touched.password && formik.errors.password ? <div style={{color: 'red', textAlign: 'left'}}>{formik.errors.password}</div> : null}\r\n                <div className={s.checkbox}><label>\r\n                    <input type=\"checkbox\"\r\n                           {...formik.getFieldProps('rememberMe')}\r\n                           checked={formik.values.rememberMe}\r\n                    />\r\n                    <span>remember me</span>\r\n                </label></div>\r\n                <div className={s.loginBtn}>\r\n                    <button type={'submit'}>LOGIN</button>\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login\r\n"],"names":["isLogin","useAppSelector","state","AuthReducer","dispatch","useAppDispatch","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","loginTC","resetForm","validate","errors","to","className","s","handleSubmit","onChange","setError","type","placeholder","getFieldProps","touched","style","color","textAlign","checked"],"sourceRoot":""}